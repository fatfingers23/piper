// Code generated by cmd/lexgen (see Makefile's lexgen); DO NOT EDIT.

package ozone

// schema: tools.ozone.verification.listVerifications

import (
	"context"

	"github.com/bluesky-social/indigo/xrpc"
)

// VerificationListVerifications_Output is the output of a tools.ozone.verification.listVerifications call.
type VerificationListVerifications_Output struct {
	Cursor        *string                              `json:"cursor,omitempty" cborgen:"cursor,omitempty"`
	Verifications []*VerificationDefs_VerificationView `json:"verifications" cborgen:"verifications"`
}

// VerificationListVerifications calls the XRPC method "tools.ozone.verification.listVerifications".
//
// createdAfter: Filter to verifications created after this timestamp
// createdBefore: Filter to verifications created before this timestamp
// cursor: Pagination cursor
// isRevoked: Filter to verifications that are revoked or not. By default, includes both.
// issuers: Filter to verifications from specific issuers
// limit: Maximum number of results to return
// sortDirection: Sort direction for creation date
// subjects: Filter to specific verified DIDs
func VerificationListVerifications(ctx context.Context, c *xrpc.Client, createdAfter string, createdBefore string, cursor string, isRevoked bool, issuers []string, limit int64, sortDirection string, subjects []string) (*VerificationListVerifications_Output, error) {
	var out VerificationListVerifications_Output

	params := map[string]interface{}{
		"createdAfter":  createdAfter,
		"createdBefore": createdBefore,
		"cursor":        cursor,
		"isRevoked":     isRevoked,
		"issuers":       issuers,
		"limit":         limit,
		"sortDirection": sortDirection,
		"subjects":      subjects,
	}
	if err := c.Do(ctx, xrpc.Query, "", "tools.ozone.verification.listVerifications", params, nil, &out); err != nil {
		return nil, err
	}

	return &out, nil
}
