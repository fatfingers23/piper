// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package teal

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *AlphaFeedPlay) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 14

	if t.ArtistMbIds == nil {
		fieldCount--
	}

	if t.Duration == nil {
		fieldCount--
	}

	if t.Isrc == nil {
		fieldCount--
	}

	if t.MusicServiceBaseDomain == nil {
		fieldCount--
	}

	if t.OriginUrl == nil {
		fieldCount--
	}

	if t.PlayedTime == nil {
		fieldCount--
	}

	if t.RecordingMbId == nil {
		fieldCount--
	}

	if t.ReleaseMbId == nil {
		fieldCount--
	}

	if t.ReleaseName == nil {
		fieldCount--
	}

	if t.SubmissionClientAgent == nil {
		fieldCount--
	}

	if t.TrackMbId == nil {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.Isrc (string) (string)
	if t.Isrc != nil {

		if len("isrc") > 1000000 {
			return xerrors.Errorf("Value in field \"isrc\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("isrc"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("isrc")); err != nil {
			return err
		}

		if t.Isrc == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.Isrc) > 1000000 {
				return xerrors.Errorf("Value in field t.Isrc was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.Isrc))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.Isrc)); err != nil {
				return err
			}
		}
	}

	// t.LexiconTypeID (string) (string)
	if len("$type") > 1000000 {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("fm.teal.alpha.feed.play"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("fm.teal.alpha.feed.play")); err != nil {
		return err
	}

	// t.Duration (int64) (int64)
	if t.Duration != nil {

		if len("duration") > 1000000 {
			return xerrors.Errorf("Value in field \"duration\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("duration"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("duration")); err != nil {
			return err
		}

		if t.Duration == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if *t.Duration >= 0 {
				if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(*t.Duration)); err != nil {
					return err
				}
			} else {
				if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-*t.Duration-1)); err != nil {
					return err
				}
			}
		}

	}

	// t.OriginUrl (string) (string)
	if t.OriginUrl != nil {

		if len("originUrl") > 1000000 {
			return xerrors.Errorf("Value in field \"originUrl\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("originUrl"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("originUrl")); err != nil {
			return err
		}

		if t.OriginUrl == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.OriginUrl) > 1000000 {
				return xerrors.Errorf("Value in field t.OriginUrl was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.OriginUrl))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.OriginUrl)); err != nil {
				return err
			}
		}
	}

	// t.TrackMbId (string) (string)
	if t.TrackMbId != nil {

		if len("trackMbId") > 1000000 {
			return xerrors.Errorf("Value in field \"trackMbId\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("trackMbId"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("trackMbId")); err != nil {
			return err
		}

		if t.TrackMbId == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.TrackMbId) > 1000000 {
				return xerrors.Errorf("Value in field t.TrackMbId was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.TrackMbId))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.TrackMbId)); err != nil {
				return err
			}
		}
	}

	// t.TrackName (string) (string)
	if len("trackName") > 1000000 {
		return xerrors.Errorf("Value in field \"trackName\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("trackName"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("trackName")); err != nil {
		return err
	}

	if len(t.TrackName) > 1000000 {
		return xerrors.Errorf("Value in field t.TrackName was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.TrackName))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.TrackName)); err != nil {
		return err
	}

	// t.PlayedTime (string) (string)
	if t.PlayedTime != nil {

		if len("playedTime") > 1000000 {
			return xerrors.Errorf("Value in field \"playedTime\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("playedTime"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("playedTime")); err != nil {
			return err
		}

		if t.PlayedTime == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.PlayedTime) > 1000000 {
				return xerrors.Errorf("Value in field t.PlayedTime was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.PlayedTime))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.PlayedTime)); err != nil {
				return err
			}
		}
	}

	// t.ArtistMbIds ([]string) (slice)
	if t.ArtistMbIds != nil {

		if len("artistMbIds") > 1000000 {
			return xerrors.Errorf("Value in field \"artistMbIds\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("artistMbIds"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("artistMbIds")); err != nil {
			return err
		}

		if len(t.ArtistMbIds) > 8192 {
			return xerrors.Errorf("Slice value in field t.ArtistMbIds was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.ArtistMbIds))); err != nil {
			return err
		}
		for _, v := range t.ArtistMbIds {
			if len(v) > 1000000 {
				return xerrors.Errorf("Value in field v was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(v))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(v)); err != nil {
				return err
			}

		}
	}

	// t.ArtistNames ([]string) (slice)
	if len("artistNames") > 1000000 {
		return xerrors.Errorf("Value in field \"artistNames\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("artistNames"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("artistNames")); err != nil {
		return err
	}

	if len(t.ArtistNames) > 8192 {
		return xerrors.Errorf("Slice value in field t.ArtistNames was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.ArtistNames))); err != nil {
		return err
	}
	for _, v := range t.ArtistNames {
		if len(v) > 1000000 {
			return xerrors.Errorf("Value in field v was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(v))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string(v)); err != nil {
			return err
		}

	}

	// t.ReleaseMbId (string) (string)
	if t.ReleaseMbId != nil {

		if len("releaseMbId") > 1000000 {
			return xerrors.Errorf("Value in field \"releaseMbId\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("releaseMbId"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("releaseMbId")); err != nil {
			return err
		}

		if t.ReleaseMbId == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.ReleaseMbId) > 1000000 {
				return xerrors.Errorf("Value in field t.ReleaseMbId was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.ReleaseMbId))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.ReleaseMbId)); err != nil {
				return err
			}
		}
	}

	// t.ReleaseName (string) (string)
	if t.ReleaseName != nil {

		if len("releaseName") > 1000000 {
			return xerrors.Errorf("Value in field \"releaseName\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("releaseName"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("releaseName")); err != nil {
			return err
		}

		if t.ReleaseName == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.ReleaseName) > 1000000 {
				return xerrors.Errorf("Value in field t.ReleaseName was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.ReleaseName))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.ReleaseName)); err != nil {
				return err
			}
		}
	}

	// t.RecordingMbId (string) (string)
	if t.RecordingMbId != nil {

		if len("recordingMbId") > 1000000 {
			return xerrors.Errorf("Value in field \"recordingMbId\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("recordingMbId"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("recordingMbId")); err != nil {
			return err
		}

		if t.RecordingMbId == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.RecordingMbId) > 1000000 {
				return xerrors.Errorf("Value in field t.RecordingMbId was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.RecordingMbId))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.RecordingMbId)); err != nil {
				return err
			}
		}
	}

	// t.SubmissionClientAgent (string) (string)
	if t.SubmissionClientAgent != nil {

		if len("submissionClientAgent") > 1000000 {
			return xerrors.Errorf("Value in field \"submissionClientAgent\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("submissionClientAgent"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("submissionClientAgent")); err != nil {
			return err
		}

		if t.SubmissionClientAgent == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.SubmissionClientAgent) > 1000000 {
				return xerrors.Errorf("Value in field t.SubmissionClientAgent was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.SubmissionClientAgent))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.SubmissionClientAgent)); err != nil {
				return err
			}
		}
	}

	// t.MusicServiceBaseDomain (string) (string)
	if t.MusicServiceBaseDomain != nil {

		if len("musicServiceBaseDomain") > 1000000 {
			return xerrors.Errorf("Value in field \"musicServiceBaseDomain\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("musicServiceBaseDomain"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("musicServiceBaseDomain")); err != nil {
			return err
		}

		if t.MusicServiceBaseDomain == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.MusicServiceBaseDomain) > 1000000 {
				return xerrors.Errorf("Value in field t.MusicServiceBaseDomain was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.MusicServiceBaseDomain))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.MusicServiceBaseDomain)); err != nil {
				return err
			}
		}
	}
	return nil
}

func (t *AlphaFeedPlay) UnmarshalCBOR(r io.Reader) (err error) {
	*t = AlphaFeedPlay{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("AlphaFeedPlay: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 22)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 1000000)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Isrc (string) (string)
		case "isrc":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 1000000)
					if err != nil {
						return err
					}

					t.Isrc = (*string)(&sval)
				}
			}
			// t.LexiconTypeID (string) (string)
		case "$type":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.LexiconTypeID = string(sval)
			}
			// t.Duration (int64) (int64)
		case "duration":
			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					maj, extra, err := cr.ReadHeader()
					if err != nil {
						return err
					}
					var extraI int64
					switch maj {
					case cbg.MajUnsignedInt:
						extraI = int64(extra)
						if extraI < 0 {
							return fmt.Errorf("int64 positive overflow")
						}
					case cbg.MajNegativeInt:
						extraI = int64(extra)
						if extraI < 0 {
							return fmt.Errorf("int64 negative overflow")
						}
						extraI = -1 - extraI
					default:
						return fmt.Errorf("wrong type for int64 field: %d", maj)
					}

					t.Duration = (*int64)(&extraI)
				}
			}
			// t.OriginUrl (string) (string)
		case "originUrl":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 1000000)
					if err != nil {
						return err
					}

					t.OriginUrl = (*string)(&sval)
				}
			}
			// t.TrackMbId (string) (string)
		case "trackMbId":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 1000000)
					if err != nil {
						return err
					}

					t.TrackMbId = (*string)(&sval)
				}
			}
			// t.TrackName (string) (string)
		case "trackName":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.TrackName = string(sval)
			}
			// t.PlayedTime (string) (string)
		case "playedTime":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 1000000)
					if err != nil {
						return err
					}

					t.PlayedTime = (*string)(&sval)
				}
			}
			// t.ArtistMbIds ([]string) (slice)
		case "artistMbIds":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.ArtistMbIds: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.ArtistMbIds = make([]string, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{
						sval, err := cbg.ReadStringWithMax(cr, 1000000)
						if err != nil {
							return err
						}

						t.ArtistMbIds[i] = string(sval)
					}

				}
			}
			// t.ArtistNames ([]string) (slice)
		case "artistNames":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.ArtistNames: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.ArtistNames = make([]string, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{
						sval, err := cbg.ReadStringWithMax(cr, 1000000)
						if err != nil {
							return err
						}

						t.ArtistNames[i] = string(sval)
					}

				}
			}
			// t.ReleaseMbId (string) (string)
		case "releaseMbId":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 1000000)
					if err != nil {
						return err
					}

					t.ReleaseMbId = (*string)(&sval)
				}
			}
			// t.ReleaseName (string) (string)
		case "releaseName":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 1000000)
					if err != nil {
						return err
					}

					t.ReleaseName = (*string)(&sval)
				}
			}
			// t.RecordingMbId (string) (string)
		case "recordingMbId":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 1000000)
					if err != nil {
						return err
					}

					t.RecordingMbId = (*string)(&sval)
				}
			}
			// t.SubmissionClientAgent (string) (string)
		case "submissionClientAgent":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 1000000)
					if err != nil {
						return err
					}

					t.SubmissionClientAgent = (*string)(&sval)
				}
			}
			// t.MusicServiceBaseDomain (string) (string)
		case "musicServiceBaseDomain":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 1000000)
					if err != nil {
						return err
					}

					t.MusicServiceBaseDomain = (*string)(&sval)
				}
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
